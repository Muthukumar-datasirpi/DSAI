{
  "apis": [
    {
      "endpoint": "POST /api/v1/issues/create",
      "description": "Creates a new issue in the system",
      "required_fields": [
        "projectIdHeader (from header, optional)",
        "issueRequest.title (from body, required, max 255)",
        "issueRequest.description (from body, optional)",
        "issueRequest.summary (from body, max 300)",
        "issueRequest.projectId (from body, required)",
        "issueRequest.assignedTo (from body, optional)",
        "issueRequest.startDate (from body, optional)",
        "issueRequest.endDate (from body, optional)",
        "issueRequest.originalEstimateDate (from body, optional)",
        "issueRequest.reporter (from body, optional)",
        "issueRequest.priorityId (from body, required)",
        "issueRequest.statusId (from body, required)",
        "issueRequest.parentIssueId (from body, optional)",
        "issueRequest.workTypeId (from body, required)",
        "issueRequest.attachments (from body, optional)",
        "issueRequest.customFieldValues (from body, optional)",
        "issueRequest.storyPoints (from body, optional)",
        "issueRequest.type (from body, optional)"
      ]
    },
    {
      "endpoint": "POST /api/v1/issues/create/quick-ticket",
      "description": "Creates a quick issue in the system",
      "required_fields": [
        "projectIdHeader (from header, optional)",
        "quickIssueRequest (from body, required)",
        "quickIssueRequest.title (from body, required)",
        "quickIssueRequest.description (from body, optional)",
        "quickIssueRequest.summary (from body, optional)",
        "quickIssueRequest.projectId (from body, required)",
        "quickIssueRequest.assignedTo (from body, optional)",
        "quickIssueRequest.startDate (from body, optional)",
        "quickIssueRequest.endDate (from body, optional)",
        "quickIssueRequest.originalEstimateDate (from body, optional)",
        "quickIssueRequest.reporter (from body, optional)",
        "quickIssueRequest.priorityId (from body, required)",
        "quickIssueRequest.statusId (from body, required)",
        "quickIssueRequest.parentIssueId (from body, optional)",
        "quickIssueRequest.workTypeId (from body, required)",
        "quickIssueRequest.attachments (from body, optional)",
        "quickIssueRequest.customFieldValues (from body, optional)",
        "quickIssueRequest.storyPoints (from body, optional)",
        "quickIssueRequest.type (from body, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues",
      "description": "Retrieves a paginated list of all issues with sorting capabilities",
      "required_fields": [
        "statusIds (query, optional)",
        "priorityIds (query, optional)",
        "workTypeIds (query, optional)",
        "reporters (query, optional)",
        "assignedTo (query, optional)",
        "projectId (query, optional)",
        "sprintId (query, optional)",
        "searchText (query, optional)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'asc')"
      ]
    },
    {
      "endpoint": "POST /api/v1/issues/all",
      "description": "Retrieves all issues grouped by status with pagination and sorting",
      "required_fields": [
        "statusIds (query, optional)",
        "priorityIds (query, optional)",
        "workTypeIds (query, optional)",
        "reporters (query, optional)",
        "assignedTo (query, optional)",
        "projectId (query, optional)",
        "sprintId (query, optional)",
        "searchText (query, optional)",
        "perStatusLimit (query, default 5)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'asc')",
        "statusPageMap (body, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/user-issues/{id}/{projectId}",
      "description": "Fetches all issues for a specific user within a project",
      "required_fields": [
        "id (path, required)",
        "projectId (path, required)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'desc')"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/key",
      "description": "Retrieves an issue by its key",
      "required_fields": [
        "key (query, required)",
        "projectId (query, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/reporter",
      "description": "Retrieves a list of issues created by a specific reporter",
      "required_fields": [
        "reporter (query, required)",
        "projectId (query, required)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'asc')"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/{id}",
      "description": "Retrieves an issue by its ID",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/parent/{id}",
      "description": "Retrieves all child issues of a given issue",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/priority/{id}",
      "description": "Retrieves issues by priority",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/status/{statusId}/project/{projectId}",
      "description": "Retrieves all issues of a given status within a specific project",
      "required_fields": [
        "statusId (path, required)",
        "projectId (path, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/project/{id}",
      "description": "Retrieves issues of a project, optionally only parent issues",
      "required_fields": [
        "id (path, required)",
        "parentOnly (query, default false)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/project/{id}/issues-by-status",
      "description": "Fetches issues grouped by status in a project",
      "required_fields": [
        "id (path, required)",
        "statusId (query, optional)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'asc')"
      ]
    },
    {
      "endpoint": "PUT /api/v1/issues/{id}",
      "description": "Updates an existing issue by ID",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)",
        "issueRequest (from body, required)"
      ]
    },
    {
      "endpoint": "DELETE /api/v1/issues/{id}",
      "description": "Deletes an issue by its ID",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "POST /api/v1/issues/comment/{id}",
      "description": "Add a comment to an issue",
      "required_fields": [
        "id (path, required)",
        "commentRequest (from body, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "PUT /api/v1/issues/comment/{id}",
      "description": "Update a comment",
      "required_fields": [
        "id (path, required)",
        "commentRequest (from body, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "DELETE /api/v1/issues/comment/{id}",
      "description": "Deletes a comment by its ID",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/{id}/comments",
      "description": "Retrieves all comments for an issue",
      "required_fields": [
        "id (path, required)",
        "projectIdHeader (from header, optional)"
      ]
    },
    {
      "endpoint": "PATCH /api/v1/issues/update-status",
      "description": "Updates the status of an existing issue",
      "required_fields": [
        "statusUpdateRequest (from body, required)",
        "jwt (from auth, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/search",
      "description": "Search for issues with pagination",
      "required_fields": [
        "query (query, required)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'title')",
        "sortDir (query, default 'asc')",
        "projectId (query, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/counts",
      "description": "Retrieves total issue, project count and categorized counts",
      "required_fields": [
        "subdomain (header, required)",
        "fromDate (query, optional)",
        "toDate (query, optional)",
        "projectId (query, optional)"
      ]
    },
    {
      "endpoint": "POST /api/v1/issues/upload-attachments",
      "description": "Uploads multiple attachments to MinIO",
      "required_fields": [
        "attachments (multipart, optional)",
        "jwt (from auth, required)"
      ]
    },
    {
      "endpoint": "DELETE /api/v1/issues/attachments/{attachmentId}",
      "description": "Deletes an attachment from MinIO and database",
      "required_fields": [
        "attachmentId (path, required)",
        "jwt (from auth, required)"
      ]
    },
    {
      "endpoint": "DELETE /api/v1/issues/delete-attachment",
      "description": "Deletes an attachment in S3 bucket",
      "required_fields": [
        "fileName (query, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/download",
      "description": "Downloads a file from the server",
      "required_fields": [
        "fileName (query, required)"
      ]
    },
    {
      "endpoint": "POST /api/v1/issues/email-configs",
      "description": "Creates a new email configuration for issue management",
      "required_fields": [
        "emailConfiguration (from body, required)"
      ]
    },
    {
      "endpoint": "GET /api/v1/issues/user/{userId}/project/{projectId}",
      "description": "Retrieves issues assigned to a user in a project",
      "required_fields": [
        "userId (path, required)",
        "projectId (path, required)",
        "page (query, default 0)",
        "size (query, default 10)",
        "sortBy (query, default 'createdAt')",
        "direction (query, default 'desc')"
      ]
    }
  ]
}